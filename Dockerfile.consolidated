# Consolidated Dockerfile with multi-stage builds for DashBuilder/NRDOT
# Supports multiple targets: development, production, nrdot, etc.

# ===== Builder Stage =====
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    bash git curl python3 make g++ \
    chromium chromium-chromedriver

WORKDIR /app

# Copy all package files
COPY package*.json ./
COPY scripts/package*.json ./scripts/
COPY nrdot-nr1-app/package*.json ./nrdot-nr1-app/
COPY orchestrator/package*.json ./orchestrator/
COPY automation/package*.json ./automation/

# Install all dependencies
RUN npm install --legacy-peer-deps --workspaces

# Copy all source files
COPY . .

# Build the application
RUN npm run build

# ===== Development Stage =====
FROM node:18-alpine AS development

# Install development dependencies
RUN apk add --no-cache \
    bash git curl python3 make g++ \
    vim nano jq yq

WORKDIR /app

# Copy from builder
COPY --from=builder /app .

# Set environment for development
ENV NODE_ENV=development

# Expose development ports
EXPOSE 3000 3001 8080

# Development entrypoint
CMD ["npm", "run", "dev"]

# ===== Production Stage =====
FROM node:18-alpine AS production

# Install production dependencies only
RUN apk add --no-cache \
    bash curl jq yq

WORKDIR /app

# Copy production assets from builder
COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package*.json /app/
COPY --from=builder /app/node_modules /app/node_modules
COPY --from=builder /app/scripts /app/scripts
COPY --from=builder /app/configs /app/configs
COPY --from=builder /app/examples /app/examples

# Copy entrypoint scripts
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Set environment for production
ENV NODE_ENV=production

# Expose production ports
EXPOSE 3000 3001 8080

# Default command
CMD ["/usr/local/bin/docker-entrypoint.sh"]

# ===== DashBuilder Stage =====
FROM production AS dashbuilder

# Add DashBuilder specific configuration
COPY --from=builder /app/docker-output /app/output
COPY --from=builder /app/nrdot-config /app/nrdot-config

# Expose DashBuilder ports
EXPOSE 3000

# Default command for DashBuilder
CMD ["npm", "run", "dashbuilder"]

# ===== NRDOT Stage =====
FROM node:18-alpine AS nrdot

# Install NRDOT dependencies
RUN apk add --no-cache \
    bash curl jq yq supervisor nginx procps coreutils

WORKDIR /app

# Copy application files from builder
COPY --from=builder /app/distributions/nrdot-plus /app/
COPY --from=builder /app/configs /etc/nrdot-plus/configs
COPY --from=builder /app/node_modules /app/node_modules
COPY --from=builder /app/scripts /app/scripts

# Copy NRDOT specific configuration
COPY distributions/nrdot-plus/config /etc/nrdot-plus/
COPY distributions/nrdot-plus/scripts /usr/local/bin/

# Make scripts executable
RUN find /usr/local/bin -type f -name "*.sh" -exec chmod +x {} \;

# Setup NRDOT directories
RUN mkdir -p /var/lib/nrdot-plus /var/log/nrdot

# Copy NRDOT entrypoint script
COPY docker-entrypoint-nrdot.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint-nrdot.sh

# Expose NRDOT ports
EXPOSE 80 3000 3001 8888 13133 4317 4318 55679

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=180s --retries=5 \
    CMD /usr/local/bin/health-check-comprehensive.sh

# Default command for NRDOT
CMD ["/usr/local/bin/docker-entrypoint-nrdot.sh"]

# ===== OTEL Stage =====
FROM nrdot AS otel

# Install OTEL specific dependencies
RUN apk add --no-cache \
    bash curl ca-certificates

# Copy OTEL configuration
COPY configs/otel-config-optimized.yaml /etc/otel/config.yaml

# Set environment variables for OTEL
ENV GOGC=80
ENV GOMEMLIMIT=4GiB

# Expose OTEL ports
EXPOSE 4317 4318 8888 1777

# Copy OTEL entrypoint script
COPY entrypoint-otel.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/entrypoint-otel.sh

# Default command for OTEL
CMD ["/usr/local/bin/entrypoint-otel.sh"]
