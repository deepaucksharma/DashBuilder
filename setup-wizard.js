#!/usr/bin/env node

const inquirer = require('inquirer');
const chalk = require('chalk');
const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process').promises;

console.log(chalk.blue.bold(`
╔══════════════════════════════════════════╗
║     DashBuilder Setup Wizard v2.0        ║
╚══════════════════════════════════════════╝
`));

async function checkPrerequisites() {
  console.log(chalk.yellow('\n📋 Checking prerequisites...\n'));
  
  const checks = [
    { name: 'Node.js', command: 'node --version', minVersion: '14.0.0' },
    { name: 'npm', command: 'npm --version', minVersion: '6.0.0' },
    { name: 'Docker', command: 'docker --version', required: false },
    { name: 'Docker Compose', command: 'docker-compose --version', required: false },
  ];
  
  for (const check of checks) {
    try {
      const { stdout } = await exec(check.command);
      console.log(chalk.green(`✓ ${check.name}: ${stdout.trim()}`));
    } catch (error) {
      if (check.required !== false) {
        console.log(chalk.red(`✗ ${check.name}: Not found (Required)`));
        process.exit(1);
      } else {
        console.log(chalk.yellow(`⚠ ${check.name}: Not found (Optional)`));
      }
    }
  }
}

async function setupNewRelic() {
  console.log(chalk.yellow('\n🔑 New Relic Configuration\n'));
  
  const answers = await inquirer.prompt([
    {
      type: 'input',
      name: 'licenseKey',
      message: 'Enter your New Relic License Key:',
      validate: (input) => {
        if (!input || input.length < 40) {
          return 'Please enter a valid license key (40+ characters)';
        }
        return true;
      },
    },
    {
      type: 'input',
      name: 'accountId',
      message: 'Enter your New Relic Account ID:',
      validate: (input) => {
        if (!input || !/^\d+$/.test(input)) {
          return 'Please enter a valid numeric account ID';
        }
        return true;
      },
    },
    {
      type: 'input',
      name: 'apiKey',
      message: 'Enter your New Relic API Key (User or Admin):',
      validate: (input) => {
        if (!input || input.length < 32) {
          return 'Please enter a valid API key';
        }
        return true;
      },
    },
    {
      type: 'list',
      name: 'region',
      message: 'Select your New Relic region:',
      choices: ['US', 'EU'],
      default: 'US',
    },
  ]);
  
  return answers;
}

async function setupEnvironment() {
  console.log(chalk.yellow('\n🌍 Environment Setup\n'));
  
  const answers = await inquirer.prompt([
    {
      type: 'list',
      name: 'environment',
      message: 'Select the environment to configure:',
      choices: ['development', 'staging', 'production'],
      default: 'development',
    },
    {
      type: 'confirm',
      name: 'useDocker',
      message: 'Do you want to use Docker for local development?',
      default: true,
    },
  ]);
  
  return answers;
}

async function setupNRDOT() {
  console.log(chalk.yellow('\n🎯 NRDOT Configuration\n'));
  
  const answers = await inquirer.prompt([
    {
      type: 'list',
      name: 'profile',
      message: 'Select NRDOT optimization profile:',
      choices: [
        { name: 'Conservative (50% reduction, max visibility)', value: 'conservative' },
        { name: 'Balanced (70% reduction, recommended)', value: 'balanced' },
        { name: 'Aggressive (85% reduction, min telemetry)', value: 'aggressive' },
      ],
      default: 'balanced',
    },
    {
      type: 'confirm',
      name: 'enableExperiments',
      message: 'Enable NRDOT experiments (A/B testing)?',
      default: false,
    },
    {
      type: 'number',
      name: 'controlLoopInterval',
      message: 'Control loop interval (seconds):',
      default: 60,
      validate: (input) => input > 0 || 'Must be greater than 0',
    },
  ]);
  
  return answers;
}

async function createEnvFile(config) {
  const envContent = `# Generated by DashBuilder Setup Wizard
# Environment: ${config.environment.environment}

NODE_ENV=${config.environment.environment}

# New Relic Configuration
NEW_RELIC_LICENSE_KEY=${config.newRelic.licenseKey}
NEW_RELIC_ACCOUNT_ID=${config.newRelic.accountId}
NEW_RELIC_API_KEY=${config.newRelic.apiKey}
NEW_RELIC_REGION=${config.newRelic.region}
OTEL_EXPORTER_OTLP_ENDPOINT=${config.newRelic.region === 'EU' ? 'https://otlp.eu01.nr-data.net:4317' : 'https://otlp.nr-data.net:4317'}

# NRDOT Configuration
NRDOT_PROFILE=${config.nrdot.profile}
NRDOT_EXPERIMENT_ENABLED=${config.nrdot.enableExperiments}
NRDOT_CONTROL_LOOP_INTERVAL=${config.nrdot.controlLoopInterval}

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_NAME=dashbuilder_${config.environment.environment}
DB_USER=dashbuilder
DB_PASSWORD=${config.environment.environment}_password

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0

# Application Settings
APP_PORT=3000
API_PORT=8080
DEBUG=${config.environment.environment === 'development' ? 'true' : 'false'}
LOG_LEVEL=${config.environment.environment === 'development' ? 'debug' : 'info'}
`;

  const envPath = path.join(process.cwd(), '.env');
  await fs.writeFile(envPath, envContent);
  console.log(chalk.green(`\n✓ Created .env file at ${envPath}`));
}

async function installDependencies() {
  const { confirmInstall } = await inquirer.prompt([
    {
      type: 'confirm',
      name: 'confirmInstall',
      message: 'Do you want to install dependencies now?',
      default: true,
    },
  ]);
  
  if (confirmInstall) {
    console.log(chalk.yellow('\n📦 Installing dependencies...\n'));
    
    try {
      await exec('npm install');
      console.log(chalk.green('✓ Root dependencies installed'));
      
      const subdirs = ['scripts', 'automation', 'nrdot-nr1-app'];
      for (const dir of subdirs) {
        try {
          await exec(`cd ${dir} && npm install`);
          console.log(chalk.green(`✓ ${dir} dependencies installed`));
        } catch (error) {
          console.log(chalk.yellow(`⚠ Failed to install ${dir} dependencies`));
        }
      }
    } catch (error) {
      console.log(chalk.red('✗ Failed to install dependencies'));
      console.log(chalk.yellow('Run "npm run install:all" manually'));
    }
  }
}

async function startServices(useDocker) {
  if (useDocker) {
    const { startDocker } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'startDocker',
        message: 'Do you want to start Docker services now?',
        default: true,
      },
    ]);
    
    if (startDocker) {
      console.log(chalk.yellow('\n🐳 Starting Docker services...\n'));
      
      try {
        await exec('docker-compose -f docker-compose.dev.yml up -d');
        console.log(chalk.green('✓ Docker services started'));
        console.log(chalk.cyan('\nServices available at:'));
        console.log('  - Dashboard: http://localhost:3000');
        console.log('  - API: http://localhost:8080');
        console.log('  - Prometheus: http://localhost:9090');
        console.log('  - Grafana: http://localhost:3001');
      } catch (error) {
        console.log(chalk.red('✗ Failed to start Docker services'));
        console.log(chalk.yellow('Run "docker-compose -f docker-compose.dev.yml up -d" manually'));
      }
    }
  }
}

async function main() {
  try {
    await checkPrerequisites();
    
    const newRelicConfig = await setupNewRelic();
    const environmentConfig = await setupEnvironment();
    const nrdotConfig = await setupNRDOT();
    
    const config = {
      newRelic: newRelicConfig,
      environment: environmentConfig,
      nrdot: nrdotConfig,
    };
    
    await createEnvFile(config);
    await installDependencies();
    await startServices(environmentConfig.useDocker);
    
    console.log(chalk.green.bold(`
╔══════════════════════════════════════════╗
║       Setup Complete! 🎉                 ║
╚══════════════════════════════════════════╝
`));
    
    console.log(chalk.cyan('\n📚 Next Steps:'));
    console.log('1. Review the generated .env file');
    console.log('2. Run "npm run test:connection" to verify New Relic connection');
    console.log('3. Access the dashboard at http://localhost:3000');
    console.log('4. Check the documentation at docs/README.md');
    console.log('\nHappy monitoring! 🚀\n');
    
  } catch (error) {
    console.error(chalk.red('\n✗ Setup failed:'), error.message);
    process.exit(1);
  }
}

main();