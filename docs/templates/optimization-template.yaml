# NRDOT v2 Optimization Configuration Template
# Copy this file to /etc/nrdot-collector-host/optimization.yaml
# and customize for your environment

version: 2.0.0
schema_version: 1

# =============================================================================
# RUNTIME STATE - Updated automatically by control loop
# =============================================================================
state:
  active_profile: "balanced"  # Current optimization profile
  last_updated: "2024-01-01T00:00:00Z"
  updated_by: "manual"
  host_id: "${env:HOSTNAME}"
  experiment_ring: "${env:NRDOT_RING:-0}"  # Ring assignment (0-7)

# =============================================================================
# COST MODEL - Customize for your organization
# =============================================================================
cost_model:
  # Currency for cost calculations
  currency: "${env:NRDOT_COST_CURRENCY:-USD}"
  
  # Cost per million data points (adjust based on your contract)
  per_million_datapoints: ${env:NRDOT_COST_PER_MILLION:-0.25}
  
  # Billing model: datapoints, bytes, or series
  billing_model: "${env:NRDOT_BILLING_MODEL:-datapoints}"
  
  # Collection interval in seconds
  collection_interval_seconds: 60

# =============================================================================
# PROCESS CLASSIFICATION - Add your custom patterns here
# =============================================================================
process_classification:
  # Tier 1: Critical System Processes (Score: 1.0)
  # These are NEVER filtered out
  critical_system:
    score: 1.0
    patterns:
      linux:
        - "^(init|systemd|kernel)$"
        - "^sshd$"
        - "^systemd-"  # All systemd services
        # Add your critical system processes here
      windows:
        - "^(System|smss\\.exe|csrss\\.exe|wininit\\.exe)$"
        - "^services\\.exe$"
        - "^lsass\\.exe$"
        - "^svchost\\.exe$"
        # Add your critical Windows processes here
  
  # Tier 2: Database Processes (Score: 0.9)
  # High priority, rarely filtered
  database:
    score: 0.9
    patterns:
      common:
        - "^(postgres|postmaster)$"
        - "^mysqld$"
        - "^mongod$"
        - "^redis-server$"
        - "^cassandra$"
        - "^elasticsearch$"
        - "^influxd$"
        # Add your database processes here
      windows:
        - "^sqlservr\\.exe$"  # SQL Server
        - "^oracle\\.exe$"
  
  # Tier 3: Web/API Servers (Score: 0.8)
  # Important for service health
  web_server:
    score: 0.8
    patterns:
      common:
        - "^nginx"
        - "^apache2?$"
        - "^httpd$"
        - "^haproxy$"
        - "^envoy$"
        - "^traefik$"
        # Add your web servers here
      windows:
        - "^w3wp\\.exe$"  # IIS Worker Process
  
  # Tier 4: Application Runtimes (Score: 0.6)
  # Your application processes
  application:
    score: 0.6
    patterns:
      common:
        - "^java(\\.exe)?$"
        - "^python([0-9\\.]+)?(\\.exe)?$"
        - "^ruby(\\.exe)?$"
        - "^node(\\.exe)?$"
        - "^dotnet(\\.exe)?$"
        - "^php(-fpm)?$"
        - "^perl$"
        # Add your application patterns here
  
  # Tier 5: Monitoring/Agents (Score: 0.3)
  # Lower priority telemetry
  monitoring:
    score: 0.3
    patterns:
      common:
        - "newrelic"
        - "datadog"
        - "splunkd"
        - "telegraf"
        - "prometheus"
        - "grafana"
        - "collectd"
        # Add your monitoring tools here
  
  # Tier 6: Background/Utility (Score: 0.1)
  # Low priority, often filtered
  utility:
    score: 0.1
    patterns:
      linux:
        - "^cron$"
        - "^atd$"
        - "^anacron$"
      windows:
        - "^TaskScheduler$"
  
  # Tier 7: Noise (Score: 0.0)
  # Always excluded from collection
  noise:
    score: 0.0
    patterns:
      linux:
        - "^(kworker|ksoftirqd|migration|rcu_)"  # Kernel threads
        - "^(ps|ls|cat|grep|awk|sed|find)$"      # Shell commands
        - "^\\.("                                  # Hidden processes
      windows:
        - "^(SearchIndexer|WmiPrvSE|TrustedInstaller)"
        - "^(tasklist|findstr|cmd)$"
        - "^conhost\\.exe$"

# =============================================================================
# CUSTOM CLASSIFICATIONS - Add your organization-specific tiers
# =============================================================================
custom_classification:
  # Example: Business-critical applications
  business_critical:
    score: 0.95
    patterns:
      common:
        - "^payment-service"
        - "^order-processor"
        - "^inventory-manager"
  
  # Example: Development/Test processes
  development:
    score: 0.2
    patterns:
      common:
        - "-test$"
        - "-dev$"
        - "^localhost"

# =============================================================================
# OPTIMIZATION PROFILES
# =============================================================================
profiles:
  # Conservative: Maximum visibility, minimal filtering
  conservative:
    description: "Maximum visibility for troubleshooting"
    thresholds:
      min_importance_score: 0.2      # Include most processes
      cpu_threshold_percent: 5.0     # Low CPU threshold
      memory_threshold_mb: 50        # Low memory threshold
      io_threshold_kb_per_sec: 500   # Low I/O threshold
    limits:
      max_series_per_host: 10000     # High limit
      top_k_per_class:
        critical_system: 999         # Keep all critical
        database: 100                # Keep many DBs
        web_server: 50
        application: 40
        monitoring: 20
        default: 10
  
  # Balanced: Good cost/visibility trade-off (RECOMMENDED)
  balanced:
    description: "Recommended for most environments"
    thresholds:
      min_importance_score: 0.5
      cpu_threshold_percent: 10.0
      memory_threshold_mb: 100
      io_threshold_kb_per_sec: 1000
    limits:
      max_series_per_host: 5000
      top_k_per_class:
        critical_system: 999
        database: 50
        web_server: 30
        application: 20
        monitoring: 10
        default: 5
  
  # Aggressive: Maximum cost reduction
  aggressive:
    description: "Aggressive filtering for cost savings"
    thresholds:
      min_importance_score: 0.7
      cpu_threshold_percent: 20.0
      memory_threshold_mb: 200
      io_threshold_kb_per_sec: 5000
    limits:
      max_series_per_host: 2000
      top_k_per_class:
        critical_system: 50
        database: 20
        web_server: 15
        application: 10
        monitoring: 5
        default: 2
  
  # Emergency: Crisis mode
  emergency:
    description: "Emergency mode - minimum telemetry"
    thresholds:
      min_importance_score: 0.9
      cpu_threshold_percent: 50.0
      memory_threshold_mb: 500
      io_threshold_kb_per_sec: 10000
    limits:
      max_series_per_host: 500
      top_k_per_class:
        critical_system: 20
        database: 10
        web_server: 5
        application: 5
        monitoring: 0
        default: 0

# =============================================================================
# CUSTOM PROFILES - Create your own profiles
# =============================================================================
custom_profiles:
  # Example: Weekend profile with relaxed limits
  weekend:
    description: "Relaxed limits for weekends"
    thresholds:
      min_importance_score: 0.4
      cpu_threshold_percent: 15.0
      memory_threshold_mb: 150
      io_threshold_kb_per_sec: 2000
    limits:
      max_series_per_host: 6000
      top_k_per_class:
        critical_system: 999
        database: 60
        web_server: 40
        application: 30
        monitoring: 15
        default: 8
  
  # Example: Peak hours profile
  peak_hours:
    description: "Tighter limits during peak hours"
    thresholds:
      min_importance_score: 0.6
      cpu_threshold_percent: 15.0
      memory_threshold_mb: 150
      io_threshold_kb_per_sec: 1500
    limits:
      max_series_per_host: 3000
      top_k_per_class:
        critical_system: 999
        database: 30
        web_server: 20
        application: 15
        monitoring: 5
        default: 3

# =============================================================================
# EXPERIMENTS - A/B testing configuration
# =============================================================================
experiments:
  enabled: true
  
  # Define active experiments
  active_experiments:
    # Example: Test EWMA anomaly detection
    - id: "ewma_anomaly_detection"
      description: "Test EWMA-based anomaly detection"
      control_rings: [0, 1]      # Control group
      treatment_rings: [2, 3]    # Treatment group
      start_date: "2024-01-01"
      duration_days: 14
      success_metrics:
        - metric: "anomaly_detection_rate"
          operator: ">="
          value: 0.85
        - metric: "false_positive_rate"
          operator: "<"
          value: 0.15
    
    # Example: Test new classification tier
    - id: "ml_classification"
      description: "Test ML-based process classification"
      control_rings: [4, 5]
      treatment_rings: [6, 7]
      start_date: "2024-01-15"
      duration_days: 30
      config_override:
        custom_classification:
          ml_predicted:
            score: 0.75
            patterns:
              common:
                - "^ml-classified-"

# =============================================================================
# ADVANCED OPTIONS
# =============================================================================
advanced:
  # EWMA (Exponential Weighted Moving Average) settings
  ewma:
    enabled: true
    alpha: 0.2  # Smoothing factor (0-1, higher = more weight on recent)
    
  # Variance detection
  variance_detection:
    enabled: true
    threshold_multiplier: 2.0  # Flag if variance > 2x normal
    
  # Time-based rules
  time_based_rules:
    enabled: false
    rules:
      - name: "business_hours"
        schedule: "Mon-Fri 09:00-17:00"
        profile_override: "balanced"
      - name: "after_hours"
        schedule: "Mon-Fri 17:00-09:00"
        profile_override: "aggressive"
      - name: "weekends"
        schedule: "Sat-Sun"
        profile_override: "weekend"
  
  # Alerting thresholds
  alerts:
    coverage_threshold: 0.90     # Alert if coverage drops below 90%
    cost_threshold_multiplier: 2  # Alert if cost exceeds 2x budget
    series_threshold_multiplier: 1.5  # Alert if series exceeds 1.5x limit