#!/bin/bash
# DashBuilder + NRDOT v2 + Experiments - Integrated Setup Script
# This script handles the complete integration setup with experiment framework

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Log functions
log() { echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1" >&2; exit 1; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }

# Banner
echo -e "${BLUE}"
cat << "EOF"
╔════════════════════════════════════════════════════════════╗
║                                                            ║
║     DashBuilder + NRDOT v2 + Experiments                   ║
║     Complete Telemetry Optimization & Testing Solution     ║
║                                                            ║
╚════════════════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

# Check if running as root (not recommended)
if [[ $EUID -eq 0 ]]; then
   warn "Running as root is not recommended. Continue anyway? (y/N)"
   read -r response
   if [[ ! "$response" =~ ^[Yy]$ ]]; then
       exit 1
   fi
fi

# Step 1: Prerequisites Check
log "Step 1: Checking prerequisites..."

check_command() {
    if ! command -v "$1" &> /dev/null; then
        error "$1 is required but not installed. Please install it first."
    else
        info "✓ $1 found: $(command -v "$1")"
    fi
}

check_command docker
check_command docker-compose
check_command node
check_command npm
check_command curl
check_command jq

# Check Docker daemon
if ! docker info &> /dev/null; then
    error "Docker daemon is not running. Please start Docker first."
fi

# Step 2: Environment Configuration
log "Step 2: Setting up environment configuration..."

if [[ -f .env ]]; then
    warn ".env file already exists. Backup and continue? (y/N)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
        log "Backed up existing .env file"
    else
        error "Setup cancelled"
    fi
fi

# Interactive configuration
info "Please provide your New Relic credentials:"
read -p "New Relic License Key: " -s NR_LICENSE_KEY
echo
read -p "New Relic Account ID: " NR_ACCOUNT_ID
read -p "New Relic API Key: " -s NR_API_KEY
echo
read -p "New Relic Region (US/EU) [US]: " NR_REGION
NR_REGION=${NR_REGION:-US}

# Validate inputs
if [[ -z "$NR_LICENSE_KEY" ]] || [[ -z "$NR_ACCOUNT_ID" ]] || [[ -z "$NR_API_KEY" ]]; then
    error "All New Relic credentials are required"
fi

# Create .env file
cat > .env << EOF
# Generated by integrated-setup.sh on $(date)
# New Relic Configuration
NEW_RELIC_LICENSE_KEY=${NR_LICENSE_KEY}
NEW_RELIC_ACCOUNT_ID=${NR_ACCOUNT_ID}
NEW_RELIC_API_KEY=${NR_API_KEY}
NEW_RELIC_REGION=${NR_REGION}

# OTLP Endpoint
OTEL_EXPORTER_OTLP_ENDPOINT=$([[ "$NR_REGION" == "EU" ]] && echo "https://otlp.eu01.nr-data.net:4317" || echo "https://otlp.nr-data.net:4317")

# NRDOT Configuration
NRDOT_PROFILE=balanced
NRDOT_CONTROL_LOOP_INTERVAL=60
NRDOT_EXPERIMENT_ENABLED=true

# Experiment Configuration
EXPERIMENT_ENABLED=true
EXPERIMENT_AUTO_RUN=false
EXPERIMENT_DEFAULT_DURATION=10

# Application Configuration
NODE_ENV=production
APP_PORT=3000
API_PORT=8080
LOG_LEVEL=info
EOF

log "Created .env file with New Relic configuration"

# Step 3: Install Dependencies
log "Step 3: Installing dependencies..."

info "Installing root dependencies..."
npm install --silent

for dir in scripts automation nrdot-nr1-app orchestrator; do
    if [[ -d "$dir" ]]; then
        info "Installing $dir dependencies..."
        (cd "$dir" && npm install --silent) || warn "Failed to install $dir dependencies"
    fi
done

# Step 4: Build Docker Images
log "Step 4: Building Docker images..."

info "Building NRDOT collector image..."
docker build -t dashbuilder/nrdot:latest . || error "Failed to build NRDOT image"

if [[ -f Dockerfile.best-practices ]]; then
    info "Building optimized image..."
    docker build -f Dockerfile.best-practices -t dashbuilder/nrdot:optimized . || warn "Failed to build optimized image"
fi

# Step 5: Initialize NRDOT Configuration
log "Step 5: Initializing NRDOT configuration..."

# Create necessary directories
mkdir -p configs/collector-profiles data/nrdot logs
mkdir -p experiment-results experiments/profiles experiments/workloads

# Ensure collector profiles exist
if [[ ! -f configs/collector-profiles/balanced.yaml ]]; then
    warn "Collector profiles missing. Creating default profiles..."
    cp -r distributions/nrdot-plus/config/* configs/ || warn "Failed to copy default configs"
fi

# Step 6: Start Core Services
log "Step 6: Starting core services..."

info "Starting infrastructure services..."
docker-compose up -d redis postgres

# Wait for services to be ready
info "Waiting for services to be ready..."
sleep 10

# Check service health
for service in redis postgres; do
    if docker-compose ps | grep -q "${service}.*Up"; then
        info "✓ $service is running"
    else
        error "$service failed to start"
    fi
done

# Step 7: Initialize Database
log "Step 7: Initializing database..."

if command -v psql &> /dev/null; then
    info "Creating database schema..."
    PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE IF NOT EXISTS dashbuilder;" 2>/dev/null || warn "Database might already exist"
fi

# Step 8: Start NRDOT Collector
log "Step 8: Starting NRDOT collector..."

info "Starting OpenTelemetry collector with NRDOT configuration..."
docker-compose up -d otel-collector

# Wait for collector to start
sleep 5

# Verify collector is running
if curl -s http://localhost:8888/metrics > /dev/null 2>&1; then
    info "✓ NRDOT collector is running"
    info "  Metrics endpoint: http://localhost:8888/metrics"
else
    error "NRDOT collector failed to start"
fi

# Step 9: Test New Relic Connection
log "Step 9: Testing New Relic connection..."

info "Validating API connection..."
response=$(curl -s -w "\n%{http_code}" -H "Api-Key: ${NR_API_KEY}" \
    "https://api.newrelic.com/v2/applications.json" | tail -1)

if [[ "$response" == "200" ]]; then
    info "✓ New Relic API connection successful"
else
    warn "New Relic API returned status: $response"
fi

# Step 10: Start Control Loop
log "Step 10: Starting NRDOT control loop..."

if [[ -f scripts/control-loop-enhanced.js ]]; then
    info "Starting enhanced control loop..."
    docker-compose up -d control-loop || warn "Control loop start failed"
fi

# Step 11: Deploy Dashboard Components
log "Step 11: Deploying dashboard components..."

info "Starting dashboard services..."
docker-compose up -d dashbuilder

# Step 12: Create Initial Dashboards
log "Step 12: Creating initial dashboards..."

if [[ -f orchestrator/workflows/create-dashboard.js ]]; then
    info "Creating NRDOT monitoring dashboard..."
    node orchestrator/workflows/create-dashboard.js --template nrdot-monitoring || warn "Dashboard creation failed"
fi

# Create experiment dashboard
if [[ -f scripts/src/cli.js ]]; then
    info "Creating experiment tracking dashboard..."
    cd scripts && npm run cli -- dashboard import ../dashboards/experiment-dashboard.json || warn "Experiment dashboard creation failed"
    cd ..
fi

# Step 13: Start Monitoring Stack
log "Step 13: Starting monitoring stack..."

if [[ -f docker-compose.observability.yml ]]; then
    info "Starting Prometheus and Grafana..."
    docker-compose -f docker-compose.observability.yml up -d
fi

# Step 14: Verify Complete Setup
log "Step 14: Verifying complete setup..."

sleep 10

# Check all services
services=(redis postgres otel-collector dashbuilder)
all_running=true

echo
info "Service Status:"
for service in "${services[@]}"; do
    if docker-compose ps | grep -q "${service}.*Up"; then
        echo -e "  ${GREEN}✓${NC} $service: Running"
    else
        echo -e "  ${RED}✗${NC} $service: Not running"
        all_running=false
    fi
done

# Step 15: Setup Experiment Framework
log "Step 15: Setting up experiment framework..."

# Make experiment runner executable
if [[ -f run-experiment.sh ]]; then
    chmod +x run-experiment.sh
    info "✓ Experiment runner ready"
fi

# Create quick experiment script
cat > experiment-quick.sh << 'EOF'
#!/bin/bash
echo "Running 5-minute NRDOT optimization experiment..."
npm run experiment:quick
EOF
chmod +x experiment-quick.sh

# Step 16: Post-Setup Configuration
log "Step 16: Running post-setup configuration..."

# Set up cron jobs for automated tasks
if command -v crontab &> /dev/null; then
    info "Setting up automated tasks..."
    (crontab -l 2>/dev/null; echo "0 * * * * cd $SCRIPT_DIR && docker-compose exec -T otel-collector /usr/local/bin/nrdot-health-check") | crontab -
fi

# Final Summary
echo
echo -e "${GREEN}════════════════════════════════════════════════════════════${NC}"
echo -e "${GREEN}          Setup Complete! 🎉                                 ${NC}"
echo -e "${GREEN}════════════════════════════════════════════════════════════${NC}"
echo

if [[ "$all_running" == "true" ]]; then
    info "All services are running successfully!"
else
    warn "Some services failed to start. Check logs with: docker-compose logs"
fi

echo
info "Access Points:"
echo "  • Dashboard UI: http://localhost:3000"
echo "  • API: http://localhost:8080"
echo "  • NRDOT Metrics: http://localhost:8888/metrics"
echo "  • Prometheus: http://localhost:9090"
echo "  • Grafana: http://localhost:3001 (admin/admin)"
echo
info "Next Steps:"
echo "  1. Access the dashboard at http://localhost:3000"
echo "  2. Check NRDOT metrics in New Relic One"
echo "  3. Monitor optimization at: Insights > NRDOT Dashboard"
echo "  4. Adjust NRDOT_PROFILE in .env as needed"
echo
info "Useful Commands:"
echo "  • View logs: docker-compose logs -f"
echo "  • Check metrics: curl http://localhost:8888/metrics | grep nrdot"
echo "  • Restart services: docker-compose restart"
echo "  • Stop all: docker-compose down"
echo
info "Experiment Commands:"
echo "  • Quick test: ./experiment-quick.sh"
echo "  • Full experiment: ./run-experiment.sh"
echo "  • List experiments: npm run experiment:list"
echo "  • View results: npm run experiment:results"
echo
log "Setup completed in $SECONDS seconds"

# Save setup completion marker
echo "$(date): Setup completed successfully" > .setup_complete

exit 0