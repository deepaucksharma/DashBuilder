#!/bin/bash

# LLM-Enhanced Workflow Example
# This demonstrates the complete workflow for LLM agents using NR-Guardian

echo "=== NR-Guardian LLM-Enhanced Workflow ==="
echo

# Step 1: Generate context for the LLM
echo "1. Generating context for LLM..."
CONTEXT_FILE="/tmp/llm-context.json"
nr-guardian llm context --since "7 days ago" -o "$CONTEXT_FILE"

# Extract key information from context
EVENT_TYPES=$(cat "$CONTEXT_FILE" | jq -r '.eventTypes[].name' | head -5 | tr '\n' ', ')
echo "   Available event types: $EVENT_TYPES"
echo

# Step 2: Generate a dashboard from natural language
echo "2. Generating dashboard from description..."
DESCRIPTION="Create a comprehensive application performance dashboard with response time, error rate, and throughput metrics grouped by application name for the last 24 hours"

DASHBOARD_FILE="/tmp/generated-dashboard.json"
nr-guardian llm generate-dashboard "$DESCRIPTION" -o "$DASHBOARD_FILE" --dry-run

echo "   Dashboard generated with $(cat "$DASHBOARD_FILE" | jq '.pages[0].widgets | length') widgets"
echo

# Step 3: Validate and enhance a complex query
echo "3. Enhancing a complex query..."
COMPLEX_QUERY="SELECT count(*), average(duration), percentile(duration, 95) FROM Transaction WHERE appName LIKE 'prod-%' FACET appName, host, request.uri SINCE 7 days ago"

echo "   Original query: $COMPLEX_QUERY"
ENHANCED=$(nr-guardian --json llm enhance-query "$COMPLEX_QUERY" --validate-attributes)

if echo "$ENHANCED" | jq -e '.valid == true' > /dev/null 2>&1; then
    ENHANCED_QUERY=$(echo "$ENHANCED" | jq -r '.enhancedQuery')
    echo "   Enhanced query: $ENHANCED_QUERY"
    
    # Show optimizations
    OPTIMIZATIONS=$(echo "$ENHANCED" | jq -r '.optimizations[]?.description' 2>/dev/null)
    if [ ! -z "$OPTIMIZATIONS" ]; then
        echo "   Optimizations applied:"
        echo "$OPTIMIZATIONS" | while read -r opt; do
            echo "     • $opt"
        done
    fi
fi
echo

# Step 4: Validate batch queries with auto-fix
echo "4. Validating and enhancing batch queries..."
cat > /tmp/llm-queries.txt << 'EOF'
# Queries generated by LLM that need validation
SEELCT count(*) FROM Transaction WHERE duration > 1
SELECT avg(responseTime) FROM PageView FACET userAgent
SELECT count(*) FROM CustomEvent WHERE customAttribute = 'value'
SELECT percentage(count(*), WHERE status = 'error') FROM Log TIMESERIES
SELECT * FROM Transaction FACET userId, sessionId, requestId SINCE 30 days ago
EOF

ENHANCED_QUERIES="/tmp/enhanced-queries.txt"
nr-guardian llm validate-batch /tmp/llm-queries.txt --fix-all -o "$ENHANCED_QUERIES"

echo "   Enhanced queries saved to: $ENHANCED_QUERIES"
echo

# Step 5: Check for improvements on existing dashboard
echo "5. Analyzing existing dashboard for improvements..."
if [ -f "$DASHBOARD_FILE" ]; then
    IMPROVEMENTS=$(nr-guardian --json llm suggest-improvements "$DASHBOARD_FILE")
    
    PERF_COUNT=$(echo "$IMPROVEMENTS" | jq '.performance | length')
    QUERY_COUNT=$(echo "$IMPROVEMENTS" | jq '.queries | length')
    VIZ_COUNT=$(echo "$IMPROVEMENTS" | jq '.visualizations | length')
    
    echo "   Found improvements:"
    echo "     • Performance: $PERF_COUNT suggestions"
    echo "     • Queries: $QUERY_COUNT optimizations"
    echo "     • Visualizations: $VIZ_COUNT changes"
fi
echo

# Step 6: Create an optimized monitoring strategy
echo "6. Creating optimized monitoring strategy..."
cat > /tmp/monitoring-strategy.json << 'EOF'
{
  "objective": "Monitor production applications with focus on user experience",
  "requirements": {
    "sla": {
      "availability": "99.9%",
      "responseTime": "< 2 seconds for 95th percentile",
      "errorRate": "< 1%"
    },
    "alerts": [
      "Response time degradation",
      "Error rate spike",
      "Traffic anomaly"
    ],
    "dashboards": [
      "Executive overview",
      "Operations detail",
      "Troubleshooting"
    ]
  }
}
EOF

# Generate NRQL queries for SLA monitoring
echo "   Generating SLA monitoring queries..."
cat > /tmp/sla-queries.txt << 'EOF'
SELECT percentage(count(*), WHERE duration < 2) as 'Meeting SLA' FROM Transaction WHERE appName LIKE 'prod-%' SINCE 1 hour ago
SELECT percentile(duration, 95) as '95th Percentile' FROM Transaction WHERE appName LIKE 'prod-%' FACET appName SINCE 1 hour ago
SELECT percentage(count(*), WHERE error IS true) as 'Error Rate' FROM Transaction WHERE appName LIKE 'prod-%' TIMESERIES SINCE 24 hours ago
EOF

# Validate and enhance SLA queries
nr-guardian llm validate-batch /tmp/sla-queries.txt -o /tmp/sla-queries-enhanced.txt

echo "   SLA monitoring queries validated and optimized"
echo

# Step 7: Cost optimization check
echo "7. Checking for cost optimization opportunities..."
HIGH_COST_QUERY="SELECT * FROM Transaction, PageView, Log FACET userId, sessionId, requestUri, userAgent WHERE appName = 'production' SINCE 30 days ago"

COST_ESTIMATE=$(nr-guardian --json ingest estimate-query-cost "$HIGH_COST_QUERY")
COMPLEXITY=$(echo "$COST_ESTIMATE" | jq -r '.complexity')
COST=$(echo "$COST_ESTIMATE" | jq -r '.estimatedCost')

echo "   Query complexity: $COMPLEXITY"
echo "   Estimated cost: $COST"

# Show cost optimization suggestions
COST_OPTS=$(echo "$COST_ESTIMATE" | jq -r '.optimizations[]?.suggestion' 2>/dev/null)
if [ ! -z "$COST_OPTS" ]; then
    echo "   Cost optimization suggestions:"
    echo "$COST_OPTS" | while read -r suggestion; do
        echo "     • $suggestion"
    done
fi
echo

# Step 8: Generate final recommendations
echo "8. Final Recommendations for LLM Integration:"
echo
echo "   ✓ Context Generation: Always start by generating fresh context"
echo "   ✓ Query Enhancement: Use enhance-query for all LLM-generated queries"
echo "   ✓ Batch Validation: Process multiple queries efficiently"
echo "   ✓ Dashboard Generation: Natural language to dashboard conversion works!"
echo "   ✓ Continuous Improvement: Regular analysis for optimization opportunities"
echo "   ✓ Cost Awareness: Always check query cost before production use"
echo

echo "=== Workflow Complete ==="
echo
echo "Key Takeaways:"
echo "1. NR-Guardian provides comprehensive validation and enhancement"
echo "2. LLM-generated content can be automatically corrected and optimized"
echo "3. Context-aware generation improves accuracy"
echo "4. Cost and performance are continuously monitored"
echo "5. The tool enables reliable automation of New Relic operations"