# Production-ready metricstransform/scoring processor configuration
# This replaces the placeholder scoring logic with comprehensive OTTL-based classification

metricstransform/scoring:
  error_mode: ignore
  log_statements: true
  metric_statements:
    # Apply scoring to all process metrics
    - context: metric
      statements:
        # Default importance score - applied first
        - set(resource.attributes["process.importance"], "0.3") where resource.attributes["process.executable.name"] != nil

        # Critical System Processes (importance: 1.0)
        # Linux critical
        - set(resource.attributes["process.importance"], "1.0") where resource.attributes["os.type"] == "linux" and IsMatch(resource.attributes["process.executable.name"], "^(init|systemd|kernel|sshd|systemd-logind|systemd-networkd|systemd-resolved)$")
        
        # Windows critical  
        - set(resource.attributes["process.importance"], "1.0") where resource.attributes["os.type"] == "windows" and IsMatch(resource.attributes["process.executable.name"], "^(System|Registry|smss\\.exe|csrss\\.exe|wininit\\.exe|services\\.exe|lsass\\.exe|svchost\\.exe|winlogon\\.exe)$")
        
        # Cross-platform critical
        - set(resource.attributes["process.importance"], "1.0") where IsMatch(resource.attributes["process.executable.name"], "^(dockerd|containerd|kubelet|kube-proxy|etcd|coredns)$")

        # Database Processes (importance: 0.9)
        - set(resource.attributes["process.importance"], "0.9") where IsMatch(resource.attributes["process.executable.name"], "^(postgres|postgresql|mysqld|mariadb|mongod|redis-server|cassandra|elasticsearch|influxd|clickhouse)$")
        - set(resource.attributes["process.importance"], "0.9") where IsMatch(resource.attributes["process.executable.name"], "^(oracle|sqlservr|db2sysc|couchdb|neo4j|arangod|voltdb)$")

        # Web Server Processes (importance: 0.8)
        - set(resource.attributes["process.importance"], "0.8") where IsMatch(resource.attributes["process.executable.name"], "^(nginx|apache2|httpd|caddy|traefik|haproxy|varnish|squid|envoy)$")
        - set(resource.attributes["process.importance"], "0.8") where IsMatch(resource.attributes["process.executable.name"], "^(node|nodejs|java|python|ruby|php-fpm|dotnet|go)$") and IsMatch(resource.attributes["process.command_line"], ".*(server|api|web|http).*")

        # Application Processes (importance: 0.7)
        - set(resource.attributes["process.importance"], "0.7") where IsMatch(resource.attributes["process.executable.name"], "^(java|python|node|nodejs|ruby|dotnet|php)$") and not IsMatch(resource.attributes["process.command_line"], ".*(server|api|web|http).*")
        - set(resource.attributes["process.importance"], "0.7") where IsMatch(resource.attributes["process.executable.name"], "^(worker|processor|handler|service)$")

        # Monitoring Processes (importance: 0.5)
        - set(resource.attributes["process.importance"], "0.5") where IsMatch(resource.attributes["process.executable.name"], "^(prometheus|grafana|telegraf|collectd|datadog-agent|newrelic-infra|splunkd|elastic-agent)$")
        - set(resource.attributes["process.importance"], "0.5") where IsMatch(resource.attributes["process.executable.name"], "^(otelcol|otelcol-contrib|opentelemetry-collector|fluent-bit|fluentd|filebeat|metricbeat)$")

        # Utility Processes (importance: 0.4)
        - set(resource.attributes["process.importance"], "0.4") where IsMatch(resource.attributes["process.executable.name"], "^(cron|crond|anacron|systemd-timesyncd|ntpd|chronyd)$")
        - set(resource.attributes["process.importance"], "0.4") where IsMatch(resource.attributes["process.executable.name"], "^(logrotate|rsyslog|systemd-journald|journalctl)$")

        # Noise Processes (importance: 0.0) - these should be filtered out
        # Linux noise
        - set(resource.attributes["process.importance"], "0.0") where resource.attributes["os.type"] == "linux" and IsMatch(resource.attributes["process.executable.name"], "^(ps|ls|cat|grep|awk|sed|find|sleep|true|false)$")
        - set(resource.attributes["process.importance"], "0.0") where resource.attributes["os.type"] == "linux" and IsMatch(resource.attributes["process.executable.name"], "^(kworker|ksoftirqd|migration|rcu_|kthread|kdevtmpfs|netns|writeback|kintegrityd|kblockd|ata_sff|md|devfreq_wq)$")
        
        # Windows noise
        - set(resource.attributes["process.importance"], "0.0") where resource.attributes["os.type"] == "windows" and IsMatch(resource.attributes["process.executable.name"], "^(conhost\\.exe|cmd\\.exe|powershell\\.exe|tasklist\\.exe|findstr\\.exe)$")
        
        # Set process classification tier based on importance score
        - set(resource.attributes["process.classification"], "critical_system") where resource.attributes["process.importance"] == "1.0"
        - set(resource.attributes["process.classification"], "database") where resource.attributes["process.importance"] == "0.9"
        - set(resource.attributes["process.classification"], "web_server") where resource.attributes["process.importance"] == "0.8"
        - set(resource.attributes["process.classification"], "application") where resource.attributes["process.importance"] == "0.7"
        - set(resource.attributes["process.classification"], "monitoring") where resource.attributes["process.importance"] == "0.5"
        - set(resource.attributes["process.classification"], "utility") where resource.attributes["process.importance"] == "0.4"
        - set(resource.attributes["process.classification"], "unknown") where resource.attributes["process.importance"] == "0.3"
        - set(resource.attributes["process.classification"], "noise") where resource.attributes["process.importance"] == "0.0"

        # Convert importance to float for numeric comparisons in filtering
        - set(resource.attributes["process.importance_float"], Double(resource.attributes["process.importance"]))