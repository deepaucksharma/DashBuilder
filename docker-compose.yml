version: '3.8'

# DashBuilder + NRDOT v2 Integrated Stack
# Single unified solution for telemetry optimization and dashboard management

services:
  # Core Database
  postgres:
    image: postgres:15-alpine
    container_name: dashbuilder-postgres
    environment:
      POSTGRES_DB: dashbuilder
      POSTGRES_USER: dashbuilder
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashbuilder"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dashbuilder-net

  # Cache Layer
  redis:
    image: redis:7-alpine
    container_name: dashbuilder-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dashbuilder-net

  # NRDOT OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: nrdot-collector
    command: ["--config=/etc/otel-collector.yaml"]
    volumes:
      - ./configs/collector-baseline.yaml:/etc/otel-collector.yaml:ro
      - ./configs/collector-profiles:/etc/collector-profiles:ro
      - ./configs/optimization.yaml:/etc/optimization.yaml:ro
    environment:
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - NRDOT_PROFILE=${NRDOT_PROFILE:-balanced}
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
      - "13133:13133" # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dashbuilder-net
    depends_on:
      - redis

  # NRDOT Control Loop
  control-loop:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nrdot-control-loop
    command: npm run control-loop
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
      - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
      - REDIS_URL=redis://redis:6379
      - NRDOT_CONTROL_LOOP_INTERVAL=${NRDOT_CONTROL_LOOP_INTERVAL:-60}
    volumes:
      - ./scripts:/app/scripts:ro
      - ./configs:/app/configs:rw
    depends_on:
      - redis
      - otel-collector
    restart: unless-stopped
    networks:
      - dashbuilder-net

  # DashBuilder API & Dashboard
  dashbuilder:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dashbuilder-app
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
      - NEW_RELIC_REGION=${NEW_RELIC_REGION:-US}
      - DATABASE_URL=postgres://dashbuilder:postgres@postgres:5432/dashbuilder
      - REDIS_URL=redis://redis:6379
      - APP_PORT=3000
      - API_PORT=8080
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./orchestrator:/app/orchestrator:ro
      - ./scripts:/app/scripts:ro
      - ./lib:/app/lib:ro
      - ./dashboards:/app/dashboards:rw
    ports:
      - "3000:3000"  # Dashboard UI
      - "8080:8080"  # API
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dashbuilder-net

  # Development profile services
  metrics-generator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nrdot-metrics-generator
    command: node scripts/metrics-generator-fixed.js
    environment:
      - NODE_ENV=development
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - otel-collector
    networks:
      - dashbuilder-net
    profiles:
      - development

  # Experiment runner (optional)
  experiment-runner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nrdot-experiments
    command: npm run experiment:run
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
      - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
      - EXPERIMENT_ENABLED=${NRDOT_EXPERIMENT_ENABLED:-false}
    volumes:
      - ./scripts:/app/scripts:ro
      - ./experiment-results:/app/experiment-results:rw
    depends_on:
      - otel-collector
    restart: unless-stopped
    networks:
      - dashbuilder-net
    profiles:
      - experiments

volumes:
  postgres-data:
  redis-data:

networks:
  dashbuilder-net:
    driver: bridge