name: Deploy Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
      run: |
        echo "$STAGING_KEY" > deploy_key
        chmod 600 deploy_key
        ssh -i deploy_key -o StrictHostKeyChecking=no deploy@$STAGING_HOST << 'EOF'
          cd /opt/dashbuilder
          git pull origin main
          docker-compose pull
          docker-compose up -d --force-recreate
          docker-compose run --rm dashbuilder npm run validate
        EOF
    
  deploy-production:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [deploy-staging]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Deploy to Production
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_KEY: ${{ secrets.PROD_SSH_KEY }}
        VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        echo "$PROD_KEY" > deploy_key
        chmod 600 deploy_key
        ssh -i deploy_key -o StrictHostKeyChecking=no deploy@$PROD_HOST << 'EOF'
          cd /opt/dashbuilder
          git fetch --tags
          git checkout $VERSION
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --force-recreate
          docker-compose run --rm dashbuilder npm run validate
        EOF
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false