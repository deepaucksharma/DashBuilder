version: '3.8'

services:
  # Main NRDOT container with everything
  nrdot-complete:
    build:
      context: .
      dockerfile: Dockerfile.nrdot-working
    container_name: nrdot-complete
    restart: unless-stopped
    environment:
      # CRITICAL: These must be set correctly
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
      - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY:-${NEW_RELIC_INGEST_KEY:-${NEW_RELIC_API_KEY}}}
      - NEW_RELIC_REGION=${NEW_RELIC_REGION:-US}
      
      # OTLP Configuration
      - NEW_RELIC_OTLP_ENDPOINT=${NEW_RELIC_OTLP_ENDPOINT:-otlp.nr-data.net:4317}
      
      # NRDOT Configuration
      - NRDOT_PROFILE=${NRDOT_PROFILE:-balanced}
      - NRDOT_TARGET_COVERAGE=${NRDOT_TARGET_COVERAGE:-95}
      - NRDOT_COST_REDUCTION_TARGET=${NRDOT_COST_REDUCTION_TARGET:-70}
      
      # Debugging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEBUG_METRICS=${DEBUG_METRICS:-false}
    
    ports:
      - "8080:80"      # Web Dashboard
      - "3000:3000"    # API Server
      - "3001:3001"    # WebSocket Server
      - "8888:8888"    # Prometheus Metrics
      - "13133:13133"  # Health Check
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
      - "55679:55679"  # zPages
      
    volumes:
      # Configuration
      - ./configs:/app/configs:ro
      - ./examples:/app/examples:ro
      
      # Persistent data
      - nrdot-state:/var/lib/nrdot-plus
      - nrdot-logs:/var/log
      
      # Scripts for debugging
      - ./scripts/fix-zero-ingestion.sh:/usr/local/bin/fix-ingestion:ro
      - ./scripts/generate-real-metrics.sh:/usr/local/bin/generate-metrics:ro
      
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check-comprehensive.sh"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 180s
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    
    networks:
      - nrdot-network

  # Dedicated OpenTelemetry Collector
  otel-collector:
    build:
      context: .
      dockerfile: Dockerfile.otel
    container_name: nrdot-otel
    restart: unless-stopped
    environment:
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY:-${NEW_RELIC_INGEST_KEY:-${NEW_RELIC_API_KEY}}}
      - NEW_RELIC_OTLP_ENDPOINT=${NEW_RELIC_OTLP_ENDPOINT:-otlp.nr-data.net:4317}
      - NEW_RELIC_REGION=${NEW_RELIC_REGION:-US}
      - GOGC=80
      - GOMEMLIMIT=4GiB
    
    ports:
      - "14317:4317"   # OTLP gRPC
      - "14318:4318"   # OTLP HTTP
      - "18888:8888"   # Metrics
      - "11777:1777"   # pprof
      
    volumes:
      - ./configs/otel-config-optimized.yaml:/etc/otel/config.yaml:ro
      - otel-data:/var/lib/otel
      
    networks:
      - nrdot-network
    
    profiles:
      - full

  # Metrics Generator for testing
  metrics-generator:
    image: alpine:latest
    container_name: nrdot-metrics-gen
    restart: unless-stopped
    environment:
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
      - NEW_RELIC_REGION=${NEW_RELIC_REGION:-US}
      - NRDOT_PROFILE=${NRDOT_PROFILE:-balanced}
    
    volumes:
      - ./scripts/generate-real-metrics.sh:/generate-metrics.sh:ro
      
    command: ["/bin/sh", "-c", "apk add --no-cache bash curl && chmod +x /generate-metrics.sh && /generate-metrics.sh"]
    
    networks:
      - nrdot-network
    
    depends_on:
      - nrdot-complete

  # Ingestion Monitor
  ingestion-monitor:
    image: node:18-alpine
    container_name: nrdot-ingestion-monitor
    restart: unless-stopped
    environment:
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
      - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
    
    volumes:
      - ./scripts:/app/scripts:ro
      - monitor-data:/data
      
    working_dir: /app
    
    command: |
      sh -c '
        apk add --no-cache bash curl
        cd scripts && npm install
        
        # Monitor ingestion every minute
        while true; do
          echo "[$(date)] Checking ingestion..."
          
          # Check for NRDOT metrics
          node src/cli.js nrql validate "SELECT count(*) FROM Metric WHERE metricName LIKE '\''nrdot%'\'' SINCE 5 minutes ago" > /data/ingestion-check.log 2>&1
          
          # Check for any metrics
          node src/cli.js nrql validate "SELECT count(*) FROM Metric SINCE 5 minutes ago" >> /data/ingestion-check.log 2>&1
          
          # Alert if no data
          if ! grep -q "resultCount: [1-9]" /data/ingestion-check.log; then
            echo "[$(date)] WARNING: No metrics found!" >> /data/alerts.log
          else
            echo "[$(date)] Metrics are flowing" >> /data/success.log
          fi
          
          sleep 60
        done
      '
    
    networks:
      - nrdot-network
    
    profiles:
      - monitoring

  # Prometheus for local monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: nrdot-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    ports:
      - "9090:9090"
      
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
      
    networks:
      - nrdot-network
    
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: nrdot-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=nrdot
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=fifemon-graphql-datasource
    
    ports:
      - "3002:3000"
      
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana-provisioning:/etc/grafana/provisioning:ro
      
    networks:
      - nrdot-network
    
    depends_on:
      - prometheus
    
    profiles:
      - monitoring

  # Diagnostics container
  diagnostics:
    image: alpine:latest
    container_name: nrdot-diagnostics
    restart: "no"
    environment:
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
      - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - NEW_RELIC_REGION=${NEW_RELIC_REGION:-US}
    
    volumes:
      - ./scripts/fix-zero-ingestion.sh:/fix-ingestion.sh:ro
      - diagnostics-output:/output
      
    command: ["/bin/sh", "-c", "apk add --no-cache bash curl jq && chmod +x /fix-ingestion.sh && /fix-ingestion.sh && cp /tmp/ingestion-diagnostic-*.txt /output/"]
    
    networks:
      - nrdot-network
    
    profiles:
      - debug

volumes:
  nrdot-state:
    driver: local
  nrdot-logs:
    driver: local
  otel-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  monitor-data:
    driver: local
  diagnostics-output:
    driver: local

networks:
  nrdot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16