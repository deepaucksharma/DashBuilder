# Multi-stage build for NRDOT Complete Setup with UI Components
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    bash \
    git \
    curl \
    python3 \
    make \
    g++ \
    chromium \
    chromium-chromedriver

# Set working directory
WORKDIR /app

# Copy all package files
COPY package*.json ./
COPY scripts/package*.json ./scripts/
COPY automation/package*.json ./automation/
COPY nrdot-nr1-app/package*.json ./nrdot-nr1-app/
COPY orchestrator/package*.json ./orchestrator/

# Install all dependencies
RUN npm install --legacy-peer-deps --workspaces

# Copy all source files
COPY . .

# Build NR1 app (if nr1 CLI is available)
# RUN cd nrdot-nr1-app && npm run build || echo "NR1 build skipped - CLI not available"

# Production stage
FROM node:18-alpine

# Install runtime dependencies including OpenTelemetry collector
RUN apk add --no-cache \
    bash \
    curl \
    jq \
    yq \
    supervisor \
    nginx

# Install OpenTelemetry Collector
RUN curl -L https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.96.0/otelcol-contrib_0.96.0_linux_amd64.tar.gz | tar -xz -C /usr/local/bin/

# Create necessary directories
RUN mkdir -p /etc/nrdot-plus \
    /var/lib/nrdot-plus \
    /var/log/nrdot-plus \
    /app \
    /var/www/dashboard

# Copy application from builder
COPY --from=builder /app /app

# Copy NRDOT configurations
COPY distributions/nrdot-plus/config/* /etc/nrdot-plus/
COPY distributions/nrdot-plus/scripts/* /usr/local/bin/
RUN chmod +x /usr/local/bin/*

# Create nginx configuration for dashboard UI
RUN cat > /etc/nginx/http.d/default.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    
    root /var/www/dashboard;
    index index.html;
    
    location / {
        try_files $uri $uri/ =404;
    }
    
    location /api {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    
    location /metrics {
        proxy_pass http://localhost:8888;
    }
}
EOF

# Create supervisord configuration
RUN cat > /etc/supervisord.conf << 'EOF'
[supervisord]
nodaemon=true
logfile=/var/log/supervisord.log
pidfile=/var/run/supervisord.pid

[program:otelcol]
command=/usr/local/bin/otelcol-contrib --config=/etc/nrdot-plus/config.yaml
autostart=true
autorestart=true
stderr_logfile=/var/log/nrdot-plus/otelcol.err.log
stdout_logfile=/var/log/nrdot-plus/otelcol.out.log

[program:control-loop]
command=/usr/local/bin/control-loop-enhanced.sh
autostart=true
autorestart=true
stderr_logfile=/var/log/nrdot-plus/control-loop.err.log
stdout_logfile=/var/log/nrdot-plus/control-loop.out.log

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
stderr_logfile=/var/log/nginx/error.log
stdout_logfile=/var/log/nginx/access.log

[program:api-server]
command=node /app/orchestrator/monitor.js
directory=/app
autostart=true
autorestart=true
environment=NODE_ENV="production"
stderr_logfile=/var/log/api-server.err.log
stdout_logfile=/var/log/api-server.out.log
EOF

# Create startup script with full initialization
RUN cat > /docker-entrypoint.sh << 'EOF'
#!/bin/bash
set -e

echo "=========================================="
echo " NRDOT v2 Complete Setup Initializing"
echo "=========================================="
echo ""

# Validate environment variables
if [ -z "$NEW_RELIC_API_KEY" ]; then
    echo "ERROR: NEW_RELIC_API_KEY is not set"
    exit 1
fi

if [ -z "$NEW_RELIC_ACCOUNT_ID" ]; then
    echo "ERROR: NEW_RELIC_ACCOUNT_ID is not set"
    exit 1
fi

echo "✓ Environment variables validated"

# Update NRDOT configuration with environment variables
sed -i "s/YOUR_LICENSE_KEY_HERE/$NEW_RELIC_INGEST_KEY/g" /etc/nrdot-plus/config.yaml
sed -i "s/YOUR_ACCOUNT_ID/$NEW_RELIC_ACCOUNT_ID/g" /etc/nrdot-plus/config.yaml

# Initialize the application
cd /app

echo ""
echo "Testing New Relic connection..."
if npm run test:connection > /dev/null 2>&1; then
    echo "✓ New Relic connection successful"
else
    echo "✗ New Relic connection failed - please check your API key"
fi

echo ""
echo "Creating initial dashboards..."

# Create monitoring dashboard
cat > /tmp/nrdot-monitoring.json << 'JSON'
{
  "name": "NRDOT v2 - Process Optimization Monitor",
  "description": "Real-time monitoring of NRDOT process optimization",
  "permissions": "PUBLIC_READ_WRITE",
  "pages": [
    {
      "name": "Overview",
      "widgets": [
        {
          "title": "Optimization Status",
          "configuration": {
            "markdown": {
              "text": "# NRDOT v2 Process Optimization\n\n**Current Profile**: ${NRDOT_PROFILE}\n**Target Coverage**: ${NRDOT_TARGET_COVERAGE}%\n**Cost Reduction Target**: ${NRDOT_COST_REDUCTION_TARGET}%"
            }
          },
          "layout": { "column": 1, "row": 1, "width": 4, "height": 3 }
        },
        {
          "title": "Total Telemetry Volume",
          "configuration": {
            "billboard": {
              "query": "SELECT bytecountestimate() FROM Public_APICall SINCE 1 hour ago"
            }
          },
          "layout": { "column": 5, "row": 1, "width": 4, "height": 3 }
        },
        {
          "title": "Data Points Per Minute",
          "configuration": {
            "line": {
              "query": "SELECT rate(count(*), 1 minute) FROM Public_APICall TIMESERIES SINCE 1 hour ago"
            }
          },
          "layout": { "column": 9, "row": 1, "width": 4, "height": 3 }
        }
      ]
    }
  ]
}
JSON

# Try to create the dashboard
echo "Creating NRDOT monitoring dashboard..."
cd /app/scripts && node src/cli.js dashboard import /tmp/nrdot-monitoring.json || echo "Dashboard creation skipped"

# Generate HTML dashboard
cat > /var/www/dashboard/index.html << 'HTML'
<!DOCTYPE html>
<html>
<head>
    <title>NRDOT v2 Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { background: #008c99; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .metric-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .metric-value { font-size: 2em; font-weight: bold; color: #008c99; }
        .metric-label { color: #666; margin-top: 10px; }
        .status { padding: 5px 10px; border-radius: 4px; display: inline-block; }
        .status.active { background: #4caf50; color: white; }
        .status.inactive { background: #f44336; color: white; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>NRDOT v2 Process Optimization Dashboard</h1>
            <p>Real-time monitoring and control</p>
        </div>
        
        <div class="metrics">
            <div class="metric-card">
                <h3>OpenTelemetry Collector</h3>
                <div class="metric-value">
                    <span class="status active">ACTIVE</span>
                </div>
                <div class="metric-label">Endpoint: http://localhost:8888</div>
            </div>
            
            <div class="metric-card">
                <h3>Control Loop</h3>
                <div class="metric-value">
                    <span class="status active">RUNNING</span>
                </div>
                <div class="metric-label">Profile: ${NRDOT_PROFILE}</div>
            </div>
            
            <div class="metric-card">
                <h3>Cost Reduction</h3>
                <div class="metric-value">${NRDOT_COST_REDUCTION_TARGET}%</div>
                <div class="metric-label">Target Reduction</div>
            </div>
            
            <div class="metric-card">
                <h3>Process Coverage</h3>
                <div class="metric-value">${NRDOT_TARGET_COVERAGE}%</div>
                <div class="metric-label">Critical Processes</div>
            </div>
        </div>
        
        <div style="margin-top: 40px; background: white; padding: 20px; border-radius: 8px;">
            <h3>Quick Links</h3>
            <ul>
                <li><a href="/metrics">OpenTelemetry Metrics Endpoint</a></li>
                <li><a href="/api/health">API Health Check</a></li>
                <li><a href="https://one.newrelic.com" target="_blank">New Relic One</a></li>
            </ul>
        </div>
    </div>
</body>
</html>
HTML

echo ""
echo "Starting all services..."
exec /usr/bin/supervisord -c /etc/supervisord.conf
EOF

RUN chmod +x /docker-entrypoint.sh

# Set working directory
WORKDIR /app

# Expose ports
EXPOSE 80 3000 8888

# Environment variables
ENV NODE_ENV=production
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/api/health || exit 1

# Run the entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]