# NRDOT v2 Complete Setup with Automatic Validation
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    bash \
    git \
    curl \
    python3 \
    make \
    g++ \
    chromium \
    chromium-chromedriver

WORKDIR /app

# Copy all package files
COPY package*.json ./
COPY scripts/package*.json ./scripts/
COPY automation/package*.json ./automation/
COPY nrdot-nr1-app/package*.json ./nrdot-nr1-app/
COPY orchestrator/package*.json ./orchestrator/

# Install all dependencies
RUN npm install --legacy-peer-deps --workspaces

# Copy all source files
COPY . .

# Production stage
FROM node:18-alpine

# Install runtime dependencies
RUN apk add --no-cache \
    bash \
    curl \
    jq \
    yq \
    bc \
    supervisor \
    nginx \
    procps \
    coreutils

# Install OpenTelemetry Collector
RUN curl -L https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.96.0/otelcol-contrib_0.96.0_linux_amd64.tar.gz | tar -xz -C /usr/local/bin/

# Create necessary directories
RUN mkdir -p /etc/nrdot-plus \
    /var/lib/nrdot-plus \
    /var/log/nrdot-plus \
    /app \
    /var/www/dashboard \
    /app/output \
    /var/run/supervisor

# Copy application from builder
COPY --from=builder /app /app

# Copy configurations
COPY distributions/nrdot-plus/config/* /etc/nrdot-plus/
COPY distributions/nrdot-plus/scripts/* /usr/local/bin/
COPY docker-entrypoint-complete.sh /docker-entrypoint.sh
COPY scripts/validate-complete-setup.sh /usr/local/bin/validate-setup

# Make scripts executable
RUN chmod +x /usr/local/bin/* /docker-entrypoint.sh

# Create nginx configuration
RUN cat > /etc/nginx/http.d/default.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    
    root /var/www/dashboard;
    index index.html;
    
    location / {
        try_files $uri $uri/ =404;
    }
    
    location /api {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    
    location /metrics {
        proxy_pass http://localhost:8888;
    }
    
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF

# Create API server
RUN cat > /app/api-server.js << 'EOF'
const http = require('http');
const { exec } = require('child_process');

const server = http.createServer((req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Access-Control-Allow-Origin', '*');
    
    if (req.url === '/api/health') {
        res.writeHead(200);
        res.end(JSON.stringify({
            status: 'healthy',
            timestamp: new Date().toISOString(),
            services: {
                otel_collector: 'running',
                control_loop: 'running',
                nginx: 'running'
            }
        }));
    } else if (req.url === '/api/validate') {
        exec('/usr/local/bin/validate-setup', (error, stdout, stderr) => {
            if (error) {
                res.writeHead(500);
                res.end(JSON.stringify({ error: stderr }));
            } else {
                res.writeHead(200);
                res.end(stdout);
            }
        });
    } else if (req.url === '/api/metrics') {
        exec('cd /app/scripts && node src/cli.js ingest get-data-volume --days 1 --json', (error, stdout, stderr) => {
            if (error) {
                res.writeHead(500);
                res.end(JSON.stringify({ error: 'Failed to get metrics' }));
            } else {
                res.writeHead(200);
                res.end(stdout);
            }
        });
    } else {
        res.writeHead(404);
        res.end(JSON.stringify({ error: 'Not found' }));
    }
});

const PORT = process.env.API_PORT || 3000;
server.listen(PORT, () => {
    console.log(`API server running on port ${PORT}`);
});
EOF

# Create supervisord configuration
RUN cat > /etc/supervisord.conf << 'EOF'
[supervisord]
nodaemon=true
logfile=/var/log/supervisord.log
pidfile=/var/run/supervisor/supervisord.pid
childlogdir=/var/log

[program:otelcol]
command=/usr/local/bin/otelcol-contrib --config=/etc/nrdot-plus/config.yaml
autostart=true
autorestart=true
stderr_logfile=/var/log/nrdot-plus/otelcol.err.log
stdout_logfile=/var/log/nrdot-plus/otelcol.out.log
priority=10

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
stderr_logfile=/var/log/nginx.err.log
stdout_logfile=/var/log/nginx.out.log
priority=20

[program:api-server]
command=node /app/api-server.js
directory=/app
autostart=true
autorestart=true
environment=NODE_ENV="production"
stderr_logfile=/var/log/api-server.err.log
stdout_logfile=/var/log/api-server.out.log
priority=30

[program:control-loop]
command=/usr/local/bin/nrdot-plus-control-loop.sh
autostart=true
autorestart=true
stderr_logfile=/var/log/nrdot-plus/control-loop.err.log
stdout_logfile=/var/log/nrdot-plus/control-loop.out.log
priority=40
startretries=10
startsecs=30

[program:validator]
command=/bin/bash -c "sleep 60 && /usr/local/bin/validate-setup"
autostart=true
autorestart=false
stderr_logfile=/var/log/validator.err.log
stdout_logfile=/var/log/validator.out.log
priority=100
EOF

# Create automated test data generator
RUN cat > /usr/local/bin/generate-test-data.sh << 'EOF'
#!/bin/bash
# Generate test data for validation

echo "Generating test data..."

# Send metrics every 30 seconds
while true; do
    # CPU metric
    curl -X POST http://localhost:8888/v1/metrics \
        -H "Content-Type: application/json" \
        -d '{
            "resourceMetrics": [{
                "resource": {
                    "attributes": [{
                        "key": "host.name",
                        "value": { "stringValue": "nrdot-container" }
                    }]
                },
                "scopeMetrics": [{
                    "metrics": [{
                        "name": "system.cpu.utilization",
                        "unit": "1",
                        "gauge": {
                            "dataPoints": [{
                                "attributes": [{
                                    "key": "state",
                                    "value": { "stringValue": "user" }
                                }],
                                "timeUnixNano": "'$(date +%s)'000000000",
                                "asDouble": '$(awk 'BEGIN{srand(); print rand()*30+10}')'
                            }]
                        }
                    }]
                }]
            }]
        }' > /dev/null 2>&1
    
    # Memory metric
    curl -X POST http://localhost:8888/v1/metrics \
        -H "Content-Type: application/json" \
        -d '{
            "resourceMetrics": [{
                "resource": {
                    "attributes": [{
                        "key": "host.name",
                        "value": { "stringValue": "nrdot-container" }
                    }]
                },
                "scopeMetrics": [{
                    "metrics": [{
                        "name": "system.memory.usage",
                        "unit": "By",
                        "gauge": {
                            "dataPoints": [{
                                "timeUnixNano": "'$(date +%s)'000000000",
                                "asInt": "'$(shuf -i 1000000000-4000000000 -n 1)'"
                            }]
                        }
                    }]
                }]
            }]
        }' > /dev/null 2>&1
    
    # NRDOT specific metric
    curl -X POST http://localhost:8888/v1/metrics \
        -H "Content-Type: application/json" \
        -d '{
            "resourceMetrics": [{
                "resource": {
                    "attributes": [{
                        "key": "service.name",
                        "value": { "stringValue": "nrdot-optimizer" }
                    }]
                },
                "scopeMetrics": [{
                    "metrics": [{
                        "name": "nrdot.optimization.rate",
                        "unit": "1",
                        "gauge": {
                            "dataPoints": [{
                                "timeUnixNano": "'$(date +%s)'000000000",
                                "asDouble": 0.70
                            }]
                        }
                    }]
                }]
            }]
        }' > /dev/null 2>&1
    
    sleep 30
done
EOF

RUN chmod +x /usr/local/bin/generate-test-data.sh

# Add test data generator to supervisor
RUN cat >> /etc/supervisord.conf << 'EOF'

[program:test-data-generator]
command=/usr/local/bin/generate-test-data.sh
autostart=true
autorestart=true
stderr_logfile=/var/log/test-data-generator.err.log
stdout_logfile=/var/log/test-data-generator.out.log
priority=50
EOF

# Set working directory
WORKDIR /app

# Expose ports
EXPOSE 80 3000 8888 13133

# Environment variables
ENV NODE_ENV=production
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# Health check that validates the entire setup
HEALTHCHECK --interval=30s --timeout=30s --start-period=120s --retries=3 \
    CMD /usr/local/bin/validate-setup > /tmp/healthcheck.log 2>&1 && \
        grep -q "All validation checks passed" /tmp/healthcheck.log || exit 1

# Run the complete setup with validation
ENTRYPOINT ["/docker-entrypoint.sh"]