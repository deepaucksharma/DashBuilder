# Multi-stage build for smaller image size
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    bash \
    git \
    curl \
    python3 \
    make \
    g++

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY scripts/package*.json ./scripts/
COPY nrdot-nr1-app/package*.json ./nrdot-nr1-app/

# Install all dependencies with legacy peer deps
RUN npm ci --legacy-peer-deps || npm install --legacy-peer-deps

# Install scripts dependencies
WORKDIR /app/scripts
RUN npm ci --legacy-peer-deps || npm install --legacy-peer-deps

# Install nrdot-nr1-app dependencies
WORKDIR /app/nrdot-nr1-app
RUN npm ci --legacy-peer-deps || npm install --legacy-peer-deps

# Production stage
FROM node:18-alpine

# Install runtime dependencies only
RUN apk add --no-cache \
    bash \
    git \
    curl

# Set working directory
WORKDIR /app

# Copy from builder stage
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/scripts/node_modules ./scripts/node_modules
COPY --from=builder /app/nrdot-nr1-app/node_modules ./nrdot-nr1-app/node_modules

# Copy application files
COPY package*.json ./
COPY .gitignore ./
COPY CLAUDE.md ./
COPY README.md ./
COPY NRDOT-V2-IMPLEMENTATION-SUMMARY.md ./
COPY deployment.yaml ./
COPY setup.sh ./
COPY configs ./configs
COPY distributions ./distributions
COPY docs ./docs
COPY examples ./examples
COPY nrdot-nr1-app ./nrdot-nr1-app
COPY orchestrator ./orchestrator
COPY pkg ./pkg
COPY scripts ./scripts

# Make scripts executable
RUN chmod +x setup.sh && \
    chmod +x scripts/*.sh || true

# Create startup script
RUN echo '#!/bin/bash' > /app/start.sh && \
    echo 'echo "==================================="' >> /app/start.sh && \
    echo 'echo "DashBuilder Container Started"' >> /app/start.sh && \
    echo 'echo "==================================="' >> /app/start.sh && \
    echo 'echo ""' >> /app/start.sh && \
    echo 'echo "Available commands:"' >> /app/start.sh && \
    echo 'echo "  npm run setup:quick     - Quick setup"' >> /app/start.sh && \
    echo 'echo "  npm run deploy          - Deploy dashboards"' >> /app/start.sh && \
    echo 'echo "  npm run deploy:nrdot    - Deploy NRDOT"' >> /app/start.sh && \
    echo 'echo "  npm run validate:all    - Validate configuration"' >> /app/start.sh && \
    echo 'echo "  npm run cli -- [cmd]    - Run CLI commands"' >> /app/start.sh && \
    echo 'echo ""' >> /app/start.sh && \
    echo 'echo "First time setup:"' >> /app/start.sh && \
    echo 'echo "  1. Copy .env.docker to .env"' >> /app/start.sh && \
    echo 'echo "  2. Edit .env with your New Relic credentials"' >> /app/start.sh && \
    echo 'echo "  3. Run: npm run validate:all"' >> /app/start.sh && \
    echo 'echo ""' >> /app/start.sh && \
    echo 'exec "$@"' >> /app/start.sh && \
    chmod +x /app/start.sh

# Set the startup script as entrypoint
ENTRYPOINT ["/app/start.sh"]

# Default command - keeps container running
CMD ["tail", "-f", "/dev/null"]