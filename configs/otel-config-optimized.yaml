# NRDOT v2 Optimized OpenTelemetry Configuration for New Relic
# Addresses all known issues from operational documentation

extensions:
  # Health check - CRITICAL for monitoring
  health_check:
    endpoint: 0.0.0.0:13133
    path: /health
    check_collector_pipeline:
      enabled: true
      interval: 5s
      exporter_failure_threshold: 5

  # Memory ballast to stabilize GC
  memory_ballast:
    size_mib: 512
    
  # File storage for state persistence
  file_storage:
    directory: /var/lib/otel/storage
    timeout: 10s
    compaction:
      on_start: true
      directory: /var/lib/otel/storage
      max_transaction_size: 65536

  # Performance profiler for debugging
  pprof:
    endpoint: 0.0.0.0:1777
    
  # Z-Pages for detailed debugging
  zpages:
    endpoint: 0.0.0.0:55679

receivers:
  # OTLP receiver for external metrics
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
        max_recv_msg_size_mib: 100
        max_concurrent_streams: 100
        keepalive:
          server_parameters:
            max_connection_idle: 11s
            max_connection_age: 30s
            max_connection_age_grace: 5s
            time: 30s
            timeout: 20s
      http:
        endpoint: 0.0.0.0:4318
        max_request_body_size: 104857600  # 100MB
        include_metadata: true
        
  # Host metrics - CONTROLLED to prevent explosion
  hostmetrics:
    collection_interval: 15s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      load:
      disk:
      filesystem:
        metrics:
          system.filesystem.utilization:
            enabled: true
      network:
      # Process scraper with strict controls
      process:
        include:
          match_type: strict
          names: 
            - "nginx"
            - "java"
            - "python"
            - "node"
            - "ruby"
            - "php"
            - "go"
            - "dotnet"
            - "otelcol-contrib"
        exclude:
          match_type: regexp
          names:
            - ".*\\[.*\\]"      # Kernel threads
            - ".*<defunct>.*"   # Zombie processes
        mute_process_name_error: true
        mute_process_exe_error: true
        mute_process_io_error: true
        mute_process_user_error: true
        
  # Prometheus for self-monitoring
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

processors:
  # CRITICAL: Memory limiter must be first
  memory_limiter:
    check_interval: 5s
    limit_mib: 4096      # 4GB limit
    spike_limit_mib: 1024 # 1GB spike
    limit_percentage: 75
    spike_limit_percentage: 20
    
  # Batch processor to prevent pipeline backup
  batch:
    timeout: 10s
    send_batch_size: 1000
    send_batch_max_size: 2000
    
  # Resource processor for metadata
  resource:
    attributes:
      - key: service.name
        value: nrdot-monitoring
        action: upsert
      - key: service.version
        value: "2.0"
        action: upsert
      - key: deployment.environment
        from_attribute: NRDOT_PROFILE
        action: insert
      - key: telemetry.distro.name
        value: "nrdot"
        action: insert
        
  # Resource detection
  resourcedetection:
    detectors: [env, system, docker]
    system:
      hostname_sources: ["os", "dns"]
    timeout: 5s
    override: false
        
  # Filter to reduce volume
  filter/nrdot_reduce:
    error_mode: ignore
    metrics:
      metric:
        # Drop low-value metrics
        - 'name == "system.cpu.time"'
        - 'name == "system.disk.io_time"'
        - 'name == "system.network.packets" and attributes["direction"] == "receive"'
        
  # Transform for optimization
  transform/nrdot_optimize:
    error_mode: ignore
    metric_statements:
      - context: datapoint
        statements:
          # Round to reduce cardinality
          - set(value, Round(value, 2)) where type == GAUGE
          
  # Attributes processor to add/remove
  attributes/nrdot:
    actions:
      - key: nrdot.optimized
        value: "true"
        action: insert
      - key: host.id
        action: delete
      - key: process.pid
        action: delete
        
  # Cumulative to delta conversion
  cumulativetodelta:
    include:
      match_type: regexp
      metrics:
        - ".*\\.total$"
        - ".*\\.count$"
    exclude:
      match_type: strict
      metrics:
        - "system.cpu.time"
        
  # Metrics transform for aggregation
  metricstransform/nrdot_aggregate:
    transforms:
      # Aggregate CPU by core
      - include: system.cpu.utilization
        match_type: strict
        action: update
        operations:
          - action: aggregate_labels
            label_set: [state]
            aggregation_type: mean
            
      # Aggregate filesystem by device
      - include: system.filesystem.utilization  
        match_type: strict
        action: update
        operations:
          - action: aggregate_labels
            label_set: [device, type]
            aggregation_type: mean

exporters:
  # New Relic OTLP exporter - PRIMARY
  otlp/newrelic:
    endpoint: ${NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${NEW_RELIC_LICENSE_KEY}
    compression: gzip
    timeout: 30s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
      multiplier: 2
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 5000
      storage: file_storage
      
  # Prometheus for local monitoring
  prometheus:
    endpoint: 0.0.0.0:8888
    namespace: nrdot
    const_labels:
      service: nrdot_otel
    resource_to_telemetry_conversion:
      enabled: true
    enable_open_metrics: true
    
  # Debug exporter for troubleshooting
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 100
    
  # Logging exporter for critical errors
  logging:
    verbosity: normal
    sampling_initial: 10
    sampling_thereafter: 1000

service:
  # Enable telemetry
  telemetry:
    logs:
      level: info
      development: false
      encoding: json
      output_paths: ["/var/log/otel/collector.log"]
      error_output_paths: ["stderr", "/var/log/otel/collector-error.log"]
      initial_fields:
        service: nrdot_otel
        version: "2.0"
    metrics:
      level: detailed
      address: 0.0.0.0:8888
      
  # Extensions
  extensions: 
    - health_check
    - memory_ballast
    - file_storage
    - pprof
    - zpages
    
  # Pipelines with proper processor ordering
  pipelines:
    # Main metrics pipeline
    metrics:
      receivers: 
        - otlp
        - hostmetrics
      processors:
        # Order is CRITICAL
        - memory_limiter              # 1. Prevent OOM
        - filter/nrdot_reduce        # 2. Drop unnecessary metrics
        - transform/nrdot_optimize   # 3. Optimize remaining
        - resourcedetection          # 4. Detect resources
        - resource                   # 5. Add metadata
        - attributes/nrdot          # 6. Process attributes
        - cumulativetodelta         # 7. Convert counters
        - metricstransform/nrdot_aggregate # 8. Aggregate
        - batch                     # 9. Batch for efficiency
      exporters: 
        - otlp/newrelic
        - prometheus
        # - debug  # Enable for troubleshooting
        # - logging # Enable for critical errors
        
    # Internal metrics pipeline
    metrics/internal:
      receivers:
        - prometheus
      processors:
        - memory_limiter
        - batch
      exporters:
        - prometheus
        # - otlp/newrelic  # Optionally send internal metrics to NR