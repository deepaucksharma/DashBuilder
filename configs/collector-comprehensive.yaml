# Comprehensive OpenTelemetry Collector Configuration
# Full observability with all metrics, traces, and logs

receivers:
  # Host metrics with all scrapers enabled
  hostmetrics:
    collection_interval: 15s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
          system.cpu.time:
            enabled: true
          system.cpu.logical.count:
            enabled: true
      disk:
        metrics:
          system.disk.io:
            enabled: true
          system.disk.io_time:
            enabled: true
          system.disk.merged:
            enabled: true
          system.disk.operation_time:
            enabled: true
          system.disk.operations:
            enabled: true
          system.disk.pending_operations:
            enabled: true
          system.disk.weighted_io_time:
            enabled: true
      filesystem:
        metrics:
          system.filesystem.usage:
            enabled: true
          system.filesystem.utilization:
            enabled: true
          system.filesystem.inodes.usage:
            enabled: true
      load:
        metrics:
          system.cpu.load_average.1m:
            enabled: true
          system.cpu.load_average.5m:
            enabled: true
          system.cpu.load_average.15m:
            enabled: true
      memory:
        metrics:
          system.memory.usage:
            enabled: true
          system.memory.utilization:
            enabled: true
      network:
        metrics:
          system.network.connections:
            enabled: true
          system.network.dropped:
            enabled: true
          system.network.errors:
            enabled: true
          system.network.io:
            enabled: true
          system.network.packets:
            enabled: true
      paging:
        metrics:
          system.paging.faults:
            enabled: true
          system.paging.operations:
            enabled: true
          system.paging.usage:
            enabled: true
          system.paging.utilization:
            enabled: true
      processes:
        metrics:
          system.processes.count:
            enabled: true
          system.processes.created:
            enabled: true
      process:
        metrics:
          process.cpu.time:
            enabled: true
          process.cpu.utilization:
            enabled: true
          process.disk.io:
            enabled: true
          process.memory.physical:
            enabled: true
          process.memory.virtual:
            enabled: true
          process.threads:
            enabled: true
          process.open_file_descriptors:
            enabled: true
          process.context_switches:
            enabled: true
          process.paging.faults:
            enabled: true
        mute_process_name_error: false
        mute_process_exe_error: false
        mute_process_io_error: false
        mute_process_user_error: false

  # Docker metrics
  docker_stats:
    endpoint: unix:///var/run/docker.sock
    collection_interval: 15s
    timeout: 20s
    metrics:
      container.cpu.usage.total:
        enabled: true
      container.cpu.usage.percpu:
        enabled: true
      container.cpu.usage.kernelmode:
        enabled: true
      container.cpu.usage.usermode:
        enabled: true
      container.cpu.throttling_data.periods:
        enabled: true
      container.cpu.throttling_data.throttled_periods:
        enabled: true
      container.cpu.throttling_data.throttled_time:
        enabled: true
      container.cpu.percent:
        enabled: true
      container.memory.usage.limit:
        enabled: true
      container.memory.usage.total:
        enabled: true
      container.memory.percent:
        enabled: true
      container.memory.cache:
        enabled: true
      container.memory.rss:
        enabled: true
      container.memory.rss_huge:
        enabled: true
      container.memory.mapped_file:
        enabled: true
      container.memory.pgfault:
        enabled: true
      container.memory.pgmajfault:
        enabled: true
      container.memory.pgpgin:
        enabled: true
      container.memory.pgpgout:
        enabled: true
      container.blockio.io_service_bytes_recursive:
        enabled: true
      container.blockio.io_serviced_recursive:
        enabled: true
      container.blockio.io_merged_recursive:
        enabled: true
      container.blockio.io_queued_recursive:
        enabled: true
      container.blockio.io_time_recursive:
        enabled: true
      container.blockio.io_wait_time_recursive:
        enabled: true
      container.blockio.sectors_recursive:
        enabled: true
      container.network.io.usage.rx_bytes:
        enabled: true
      container.network.io.usage.tx_bytes:
        enabled: true
      container.network.io.usage.rx_packets:
        enabled: true
      container.network.io.usage.tx_packets:
        enabled: true
      container.network.io.usage.rx_errors:
        enabled: true
      container.network.io.usage.tx_errors:
        enabled: true
      container.network.io.usage.rx_dropped:
        enabled: true
      container.network.io.usage.tx_dropped:
        enabled: true

  # OTLP receiver for traces and metrics
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus receiver for scraping
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['localhost:8888']
        - job_name: 'node-exporter'
          scrape_interval: 10s
          static_configs:
            - targets: ['localhost:9100']

  # File log receiver
  filelog:
    include: [ /var/log/*.log ]
    start_at: beginning
    operators:
      - type: json_parser
        timestamp:
          parse_from: attributes.time
          layout: '%Y-%m-%d %H:%M:%S'
      - type: move
        from: attributes.log
        to: body
      - type: add
        field: resource.source
        value: filelog

  # Syslog receiver
  syslog:
    udp:
      listen_address: "0.0.0.0:514"
    protocol: rfc3164
    location: UTC

  # Jaeger receiver for traces
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268
      thrift_compact:
        endpoint: 0.0.0.0:6831
      thrift_binary:
        endpoint: 0.0.0.0:6832

  # Zipkin receiver for traces
  zipkin:
    endpoint: 0.0.0.0:9411

processors:
  # Batch processor
  batch:
    timeout: 10s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter
  memory_limiter:
    check_interval: 1s
    limit_mib: 1024
    spike_limit_mib: 256

  # Resource detection
  resourcedetection:
    detectors: [env, system, docker, ec2, gcp, azure]
    timeout: 5s
    override: false

  # Metrics transform for NRDOT KPIs
  metricstransform:
    transforms:
      - include: system.cpu.utilization
        match_type: strict
        action: insert
        new_name: nrdot.cpu.utilization
        operations:
          - action: add_label
            new_label: nrdot.version
            new_value: "2.0"
      - include: system.memory.utilization
        match_type: strict
        action: insert
        new_name: nrdot.memory.utilization
        operations:
          - action: add_label
            new_label: nrdot.version
            new_value: "2.0"
      - include: process.cpu.utilization
        match_type: strict
        action: insert
        new_name: nrdot.process.cpu.utilization
        operations:
          - action: add_label
            new_label: nrdot.version
            new_value: "2.0"
      - include: process.memory.physical
        match_type: strict
        action: insert
        new_name: nrdot.process.memory.usage
        operations:
          - action: add_label
            new_label: nrdot.version
            new_value: "2.0"

  # Attributes processor
  attributes:
    actions:
      - key: service.name
        value: ${OTEL_SERVICE_NAME}
        action: upsert
      - key: service.version
        value: ${OTEL_SERVICE_VERSION}
        action: upsert
      - key: deployment.environment
        value: ${NODE_ENV}
        action: upsert
      - key: nrdot.optimization_mode
        value: ${OPTIMIZATION_MODE}
        action: upsert
      - key: telemetry.sdk.name
        value: opentelemetry
        action: upsert
      - key: telemetry.sdk.language
        value: go
        action: upsert

  # Span processor
  span:
    name:
      from_attributes: ["db.statement"]
      separator: "::"

  # Tail sampling for traces
  tail_sampling:
    decision_wait: 10s
    num_traces: 100000
    expected_new_traces_per_sec: 1000
    policies:
      - name: errors-policy
        type: status_code
        status_code: {status_codes: [ERROR, UNSET]}
      - name: slow-traces-policy
        type: latency
        latency: {threshold_ms: 1000}
      - name: probabilistic-policy
        type: probabilistic
        probabilistic: {sampling_percentage: 10}
      - name: nrdot-always-sample
        type: string_attribute
        string_attribute: {key: service.name, values: [nrdot]}

  # Groupby attributes for reducing cardinality
  groupbyattrs:
    keys:
      - service.name
      - service.namespace
      - service.instance.id
      - process.executable.name
      - process.pid
      - container.name
      - container.id
      - host.name
      - host.id

  # K8s attributes
  k8sattributes:
    auth_type: "serviceAccount"
    extract:
      metadata:
        - k8s.namespace.name
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - k8s.job.name
        - k8s.node.name
        - k8s.pod.name
        - k8s.pod.uid
      labels:
        - tag_name: app.label.component
          key: component
          from: pod
    filter:
      node_from_env_var: K8S_NODE_NAME

exporters:
  # New Relic OTLP exporter
  otlp/newrelic:
    endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT}
    headers:
      api-key: ${NEW_RELIC_API_KEY}
    compression: gzip
    tls:
      insecure: false
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 60s
      max_elapsed_time: 10m
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 5000

  # Prometheus exporter
  prometheus:
    endpoint: "0.0.0.0:8888"
    namespace: otel
    const_labels:
      service: ${OTEL_SERVICE_NAME}
      version: ${OTEL_SERVICE_VERSION}
    resource_to_telemetry_conversion:
      enabled: true
    enable_open_metrics: true

  # Debug exporter
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 100

  # File exporter for local debugging
  file:
    path: /tmp/otel-metrics.json
    rotation:
      max_megabytes: 10
      max_days: 3
      max_backups: 3
      localtime: false

  # Logging exporter
  logging:
    loglevel: debug
    sampling_initial: 10
    sampling_thereafter: 50

extensions:
  # Health check
  health_check:
    endpoint: 0.0.0.0:13133
    path: "/health"
    check_collector_pipeline:
      enabled: true
      interval: 5s
      exporter_failure_threshold: 5

  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777

  # zPages
  zpages:
    endpoint: 0.0.0.0:55679

  # Memory ballast
  memory_ballast:
    size_in_percentage: 20

service:
  # Enable telemetry
  telemetry:
    logs:
      level: info
      development: false
      encoding: json
      sampling:
        initial: 10
        thereafter: 100
      output_paths: ["stdout", "/var/log/otel-collector.log"]
      error_output_paths: ["stderr", "/var/log/otel-collector-error.log"]
    metrics:
      level: detailed
      address: 0.0.0.0:8888

  extensions: [health_check, pprof, zpages, memory_ballast]
  
  pipelines:
    # Metrics pipeline
    metrics:
      receivers: [hostmetrics, docker_stats, otlp, prometheus]
      processors: [memory_limiter, batch, resourcedetection, metricstransform, attributes, groupbyattrs]
      exporters: [otlp/newrelic, prometheus, debug, file]
    
    # Traces pipeline
    traces:
      receivers: [otlp, jaeger, zipkin]
      processors: [memory_limiter, batch, resourcedetection, attributes, span, tail_sampling]
      exporters: [otlp/newrelic, debug]
    
    # Logs pipeline
    logs:
      receivers: [otlp, filelog, syslog]
      processors: [memory_limiter, batch, resourcedetection, attributes]
      exporters: [otlp/newrelic, debug]