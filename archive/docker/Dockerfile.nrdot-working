FROM alpine:3.18

# Install required packages
RUN apk add --no-cache \
    bash \
    curl \
    jq \
    nodejs \
    npm \
    supervisor \
    nginx \
    openrc \
    logrotate \
    python3 \
    py3-pip \
    git \
    make \
    gcc \
    g++ \
    linux-headers

# Create required directories
RUN mkdir -p /app /var/lib/nrdot-plus /var/log/nrdot-plus /var/log/nrdot-validation \
    /etc/nrdot /usr/local/bin /run/nginx

# Install Node.js dependencies first
WORKDIR /app
COPY package.json ./
RUN npm install --production || true

# Copy application files
COPY scripts/ /app/scripts/
COPY nrdot-nr1-app/ /app/nrdot-nr1-app/
COPY configs/ /app/configs/
COPY examples/ /app/examples/
COPY distributions/nrdot-plus/scripts/ /usr/local/bin/
COPY orchestrator/ /app/orchestrator/

# Copy critical scripts
COPY scripts/fix-zero-ingestion.sh /usr/local/bin/fix-zero-ingestion.sh
COPY scripts/generate-real-metrics.sh /usr/local/bin/generate-real-metrics.sh
COPY scripts/health-check-comprehensive.sh /usr/local/bin/health-check-comprehensive.sh

# Make all scripts executable
RUN find /usr/local/bin -type f -name "*.sh" -exec chmod +x {} \;

# Create simple nginx config
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    location / { \
        root /app/static; \
        index index.html; \
    } \
    location /health { \
        return 200 "OK"; \
        add_header Content-Type text/plain; \
    } \
    location /api { \
        proxy_pass http://localhost:3000; \
    } \
    location /ws { \
        proxy_pass http://localhost:3001; \
        proxy_http_version 1.1; \
        proxy_set_header Upgrade $http_upgrade; \
        proxy_set_header Connection "upgrade"; \
    } \
}' > /etc/nginx/http.d/default.conf

# Create simple supervisord config
RUN echo '[supervisord] \
nodaemon=true \
\
[program:nginx] \
command=/usr/sbin/nginx -g "daemon off;" \
autostart=true \
autorestart=true \
\
[program:api-server] \
command=/usr/bin/node /app/orchestrator/monitor.js \
autostart=true \
autorestart=true \
stdout_logfile=/var/log/api-server.log \
stderr_logfile=/var/log/api-server-error.log \
\
[program:metrics-generator] \
command=/bin/bash /usr/local/bin/generate-real-metrics.sh \
autostart=true \
autorestart=true \
stdout_logfile=/var/log/metrics-generator.log \
stderr_logfile=/var/log/metrics-generator-error.log \
\
[program:health-monitor] \
command=/bin/bash -c "while true; do /usr/local/bin/health-check-comprehensive.sh; sleep 60; done" \
autostart=true \
autorestart=true \
stdout_logfile=/var/log/health-monitor.log \
stderr_logfile=/var/log/health-monitor-error.log' > /etc/supervisord.conf

# Create simple API server for testing
RUN echo 'const express = require("express"); \
const app = express(); \
app.use(express.json()); \
\
app.get("/health", (req, res) => { \
    res.json({ status: "healthy", timestamp: new Date().toISOString() }); \
}); \
\
app.get("/api/status", (req, res) => { \
    res.json({ \
        service: "nrdot-v2", \
        version: "2.0.0", \
        environment: { \
            hasLicenseKey: !!process.env.NEW_RELIC_LICENSE_KEY, \
            hasApiKey: !!process.env.NEW_RELIC_API_KEY, \
            accountId: process.env.NEW_RELIC_ACCOUNT_ID \
        } \
    }); \
}); \
\
const PORT = process.env.API_PORT || 3000; \
app.listen(PORT, () => { \
    console.log(`API server running on port ${PORT}`); \
});' > /app/simple-api-server.js

# Copy entrypoint script
COPY docker-entrypoint-nrdot.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Expose ports
EXPOSE 80 3000 3001 8888 13133 4317 4318

# Set environment defaults
ENV NEW_RELIC_REGION=US \
    NRDOT_PROFILE=balanced \
    LOG_LEVEL=info

# Healthcheck
HEALTHCHECK --interval=30s --timeout=30s --start-period=180s --retries=5 \
    CMD curl -f http://localhost/health || exit 1

ENTRYPOINT ["/docker-entrypoint.sh"]